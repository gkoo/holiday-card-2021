{"version":3,"sources":["utils/puzzle.ts","components/PuzzleView.tsx","components/Homepage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["CellState","Puzzle","width","height","solution","state","rowClues","columnClues","this","initializeState","generateRowClues","generateColumnClues","i","row","j","push","map","cellClues","clues","columnNum","cells","count","length","rowIdx","colIdx","Empty","forEach","col","Xed","console","log","toString","fillInSolution","cell","join","PuzzleView","puzzle","useState","puzzleState","setPuzzleState","num","setNum","solved","setSolved","handleClick","e","preventDefault","type","shiftKey","toggleCellState","Marked","Filled","isSolved","Box","sx","undefined","Table","className","TableHead","TableRow","TableCell","border","clue","clueIdx","TableBody","minWidth","align","onClick","onContextMenu","cx","filled","xed","marked","Homepage","Container","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c81efeee.chunk.js","sourcesContent":["export enum CellState {\n  Empty,\n  Filled,\n  Xed,\n  Marked,\n}\n\nclass Puzzle {\n  height: number;\n  width: number;\n  solution: number[][];\n  state: number[][];\n  rowClues: number[][];\n  columnClues: number[][];\n\n  constructor(width: number, height: number, solution: number[][]) {\n    this.height = height;\n    this.width = width;\n    this.solution = solution;\n    this.state = [];\n    this.initializeState();\n    this.rowClues = this.generateRowClues();\n    this.columnClues = this.generateColumnClues();\n  }\n\n  initializeState() {\n    for (let i=0; i < this.height; ++i) {\n      const row = [];\n      for (let j=0; j < this.width; ++j) {\n        row.push(0);\n      }\n      this.state.push(row);\n    }\n  }\n\n  generateRowClues() {\n    return this.solution.map(this.cellClues);\n  }\n\n  generateColumnClues() {\n    const clues = [];\n    for (let columnNum = 0; columnNum < this.width; ++columnNum) {\n      clues.push(this.cellClues(this.solution.map(row => row[columnNum])));\n    }\n    return clues;\n  }\n\n  cellClues(cells: number[]) {\n    let count = 0;\n    const clues = [];\n    for (let i=0; i < cells.length; ++i) {\n      if (cells[i] !== 0) {\n        ++count;\n      } else if (count > 0) {\n        clues.push(count);\n        count = 0;\n      }\n    }\n    if (count > 0) {\n      clues.push(count);\n    }\n    if (clues.length === 0) {\n      clues.push(0);\n    }\n    return clues;\n  }\n\n  toggleCellState(rowIdx: number, colIdx: number, state: CellState) {\n    if (this.state[rowIdx][colIdx] === state) {\n      this.state[rowIdx][colIdx] = CellState.Empty;\n    } else {\n      this.state[rowIdx][colIdx] = state;\n    }\n  }\n\n  fillInSolution() {\n    this.state.forEach((row, rowIdx) => {\n      row.forEach((col, colIdx) => {\n        this.state[rowIdx][colIdx] = this.solution[rowIdx][colIdx] || CellState.Xed;\n      })\n    });\n    console.log(Puzzle.toString(this.state));\n  }\n\n  isSolved() {\n    for (let i = 0; i < this.height; ++i) {\n      for (let j = 0; j < this.width; ++j) {\n        if (this.state[i][j] !== this.solution[i][j]) { return false; }\n      }\n    }\n\n    // The puzzle is solved!\n    this.fillInSolution();\n    return true;\n  }\n\n  static toString(state: number[][]) {\n    return state.map(row =>\n      row.map(cell => cell ? 'o' : ' ').join(' ')\n    ).join('\\n');\n  }\n}\n\nexport default Puzzle;\n","import React, { useState, MouseEvent } from 'react';\n\nimport cx from 'classnames';\n\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\nimport Puzzle, { CellState } from '../utils/puzzle';\n\nimport './PuzzleView.css';\n\nconst PuzzleView: React.FC<{\n  puzzle: Puzzle\n}> = ({ puzzle }) => {\n  const [puzzleState, setPuzzleState] = useState(puzzle.state);\n  const [num, setNum] = useState(0);\n  const [solved, setSolved] = useState<boolean>(false);\n\n  const handleClick = (e: MouseEvent, rowIdx: number, colIdx: number) => {\n    e.preventDefault();\n\n    switch(e.type) {\n      case 'click':\n        if (e.shiftKey) {\n          puzzle.toggleCellState(rowIdx, colIdx, CellState.Marked);\n        } else {\n          puzzle.toggleCellState(rowIdx, colIdx, CellState.Filled);\n        }\n        break;\n      case 'contextmenu':\n        puzzle.toggleCellState(rowIdx, colIdx, CellState.Xed);\n        break;\n      default:\n        return;\n    }\n\n    // redraw the puzzle state\n    setPuzzleState(puzzle.state);\n\n    setSolved(puzzle.isSolved());\n\n    // For some reason the component doesn't redraw without the following line...?\n    setNum(num ? 0 : 1);\n  };\n\n  return (\n    <Box sx={{ width: 500 }}>\n      {\n        solved ? <h1>You solved it!</h1> : undefined\n      }\n      <Table className='puzzle-table'>\n        <TableHead>\n          <TableRow>\n            <TableCell sx={{ border: 0 }}>\n              {/* empty for row clue */}\n            </TableCell>\n            {puzzle.columnClues.map((clues, colIdx) =>\n              <TableCell key={`col-${colIdx}`} sx={{ border: 0 }}>\n                <span>\n                  {\n                    clues.map((clue, clueIdx) =>\n                      <span key={`clue-${colIdx}-${clueIdx}`}>{clue}<br/></span>\n                    )\n                  }\n                </span>\n              </TableCell>\n            )}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            puzzleState.map((row, rowIdx) => (\n              <TableRow key={`row-${rowIdx}`}>\n                <TableCell\n                  className='clue-labels row-clues'\n                  sx={{\n                    border: 0,\n                    height: 25,\n                    minWidth: 100,\n                  }}\n                  align='right'\n                >\n                  {\n                    puzzle.rowClues[rowIdx].map(\n                    (clue, clueIdx) =>\n                      <span key={`clue-${rowIdx}-${clueIdx}`} className='clue'>{clue}</span>\n                    )\n                  }\n                </TableCell>\n                {\n                  row.map((cell, colIdx) =>\n                    <TableCell\n                      key={`col-${colIdx}`}\n                      sx={{\n                        border: 1,\n                        width: 25,\n                        height: 25,\n                      }}\n                      onClick={e => handleClick(e, rowIdx, colIdx)}\n                      onContextMenu={e => handleClick(e, rowIdx, colIdx)}\n                      className={cx({ 'picross-cell': true, filled: cell === CellState.Filled, xed: cell === CellState.Xed, marked: cell === CellState.Marked })}\n                    />\n                  )\n                }\n              </TableRow>\n            ))\n          }\n        </TableBody>\n      </Table>\n    </Box>\n  );\n};\n\nexport default PuzzleView;\n","import React from 'react';\n\nimport Container from '@mui/material/Container';\n\nimport Puzzle from '../utils/puzzle';\nimport PuzzleView from './PuzzleView';\n\nconst Homepage = () => {\n  const puzzle = new Puzzle(5, 5, [\n    [1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0],\n    [0, 1, 0, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 1, 0, 1, 1],\n  ]);\n\n  return (\n    <Container>\n      <h1>Hello, world!</h1>\n      <PuzzleView puzzle={puzzle}/>\n    </Container>\n  );\n};\n\nexport default Homepage;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nimport Homepage from './components/Homepage';\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Homepage/>} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Layout.tsx","utils/puzzle.ts","components/PuzzleView.tsx","components/Homepage.tsx","components/Builder.tsx","components/Tester.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Layout","CellState","children","to","Puzzle","width","height","solution","options","test","state","rowClues","columnClues","this","initializeState","generateClues","i","row","j","push","generateRowClues","generateColumnClues","map","cellClues","clues","columnNum","cells","count","length","rowIdx","colIdx","stateToSet","Empty","forEach","col","Xed","stateCell","solutionCell","Filled","fillInSolution","cell","join","PuzzleView","puzzle","useState","puzzleState","setPuzzleState","setRowClues","setColumnClues","num","setNum","solved","setSolved","handleClick","e","preventDefault","type","shiftKey","toggleCellState","Marked","isSolved","Box","undefined","Table","className","TableHead","TableRow","TableCell","sx","border","clue","clueIdx","TableBody","minWidth","align","onClick","onContextMenu","cx","filled","xed","marked","Homepage","Container","Builder","setWidth","setHeight","setPuzzle","FormControl","InputLabel","id","Select","labelId","value","label","onChange","target","MenuItem","Button","variant","rowTemplate","newPuzzle","console","log","JSON","stringify","Tester","puzzleInput","setPuzzleInput","TextField","parse","App","basename","process","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2359aca.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from \"react-router-dom\";\n\ninterface IProps {\n  children: React.ReactNode;\n}\n\nfunction Layout({ children }: IProps) {\n  return(\n    <>\n      <ul>\n        <li><Link to=\"/\">Home</Link></li>\n        <li><Link to=\"/builder\">Builder</Link></li>\n        <li><Link to=\"/tester\">Tester</Link></li>\n      </ul>\n      {children}\n    </>\n  );\n}\n\nexport default Layout\n","export enum CellState {\n  Empty,\n  Filled,\n  Xed,\n  Marked,\n}\n\ninterface PuzzleOptions {\n  test: boolean;\n}\n\nclass Puzzle {\n  height: number;\n  width: number;\n  options: PuzzleOptions;\n  solution: number[][];\n  state: number[][];\n  rowClues: number[][] = [];\n  columnClues: number[][] = [];\n\n  constructor(width: number, height: number, solution: number[][], options: PuzzleOptions = { test: false }) {\n    this.height = height;\n    this.width = width;\n    this.solution = solution;\n    this.state = [];\n    this.options = options;\n    this.initializeState();\n    this.generateClues();\n  }\n\n  initializeState() {\n    for (let i=0; i < this.height; ++i) {\n      const row = [];\n      for (let j=0; j < this.width; ++j) {\n        row.push(0);\n      }\n      this.state.push(row);\n    }\n  }\n\n  generateClues() {\n    this.rowClues = this.generateRowClues();\n    this.columnClues = this.generateColumnClues();\n  }\n\n  generateRowClues() {\n    return this.solution.map(this.cellClues);\n  }\n\n  generateColumnClues() {\n    const clues = [];\n    for (let columnNum = 0; columnNum < this.width; ++columnNum) {\n      clues.push(this.cellClues(this.solution.map(row => row[columnNum])));\n    }\n    return clues;\n  }\n\n  cellClues(cells: number[]) {\n    let count = 0;\n    const clues = [];\n    for (let i=0; i < cells.length; ++i) {\n      if (cells[i] !== 0) {\n        ++count;\n      } else if (count > 0) {\n        clues.push(count);\n        count = 0;\n      }\n    }\n    if (count > 0) {\n      clues.push(count);\n    }\n    if (clues.length === 0) {\n      clues.push(0);\n    }\n    return clues;\n  }\n\n  toggleCellState(rowIdx: number, colIdx: number, state: CellState) {\n    let stateToSet;\n\n    if (this.state[rowIdx][colIdx] === state) {\n      stateToSet = CellState.Empty;\n    } else {\n      stateToSet = state;\n    }\n\n    this.state[rowIdx][colIdx] = stateToSet;\n\n    if (this.options.test) {\n      this.solution = this.state;\n      this.generateClues();\n    }\n  }\n\n  fillInSolution() {\n    this.state.forEach((row, rowIdx) => {\n      row.forEach((col, colIdx) => {\n        this.state[rowIdx][colIdx] = this.solution[rowIdx][colIdx] || CellState.Xed;\n      })\n    });\n  }\n\n  isSolved() {\n    for (let i = 0; i < this.height; ++i) {\n      for (let j = 0; j < this.width; ++j) {\n        const stateCell = this.state[i][j];\n        const solutionCell = this.solution[i][j];\n        if ((stateCell === CellState.Filled && solutionCell !== CellState.Filled) || (solutionCell === CellState.Filled && stateCell !== CellState.Filled)) {\n          return false;\n        }\n      }\n    }\n\n    // The puzzle is solved!\n    if (!this.options.test) {\n      this.fillInSolution();\n    }\n    return true;\n  }\n\n  static toString(state: number[][]) {\n    return state.map(row =>\n      row.map(cell => cell ? 'o' : 'x').join(' ')\n    ).join('\\n');\n  }\n}\n\nexport default Puzzle;\n","import React, { useState, MouseEvent } from 'react';\n\nimport cx from 'classnames';\n\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\nimport Puzzle, { CellState } from '../utils/puzzle';\n\nimport './PuzzleView.css';\n\nconst PuzzleView: React.FC<{\n  puzzle: Puzzle\n}> = ({ puzzle }) => {\n  const [puzzleState, setPuzzleState] = useState(puzzle.state);\n  const [rowClues, setRowClues] = useState(puzzle.rowClues);\n  const [columnClues, setColumnClues] = useState(puzzle.columnClues);\n  const [num, setNum] = useState(0);\n  const [solved, setSolved] = useState<boolean>(false);\n\n  const handleClick = (e: MouseEvent, rowIdx: number, colIdx: number) => {\n    e.preventDefault();\n\n    switch(e.type) {\n      case 'click':\n        if (e.shiftKey) {\n          puzzle.toggleCellState(rowIdx, colIdx, CellState.Marked);\n        } else {\n          puzzle.toggleCellState(rowIdx, colIdx, CellState.Filled);\n        }\n        break;\n      case 'contextmenu':\n        puzzle.toggleCellState(rowIdx, colIdx, CellState.Xed);\n        break;\n      default:\n        return;\n    }\n\n    // redraw the puzzle state\n    setPuzzleState(puzzle.state);\n\n    if (puzzle.options.test) {\n      setRowClues(puzzle.rowClues);\n      setColumnClues(puzzle.columnClues);\n    }\n\n    if (!puzzle.options.test) {\n      setSolved(puzzle.isSolved());\n    }\n\n    // For some reason the component doesn't redraw without the following line...?\n    setNum(num ? 0 : 1);\n  };\n\n  return (\n    <Box>\n      {\n        solved ? <h1>You solved it!</h1> : undefined\n      }\n      <Table className='puzzle-table'>\n        <TableHead>\n          <TableRow>\n            <TableCell sx={{ border: 0 }}>\n              {/* empty for row clue */}\n            </TableCell>\n            {columnClues.map((clues, colIdx) =>\n              <TableCell key={`col-${colIdx}`} sx={{ border: 0 }}>\n                <span>\n                  {\n                    clues.map((clue, clueIdx) =>\n                      <span key={`clue-${colIdx}-${clueIdx}`}>{clue}<br/></span>\n                    )\n                  }\n                </span>\n              </TableCell>\n            )}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            puzzleState.map((row, rowIdx) => (\n              <TableRow key={`row-${rowIdx}`}>\n                <TableCell\n                  className='clue-labels row-clues'\n                  sx={{\n                    border: 0,\n                    height: 25,\n                    minWidth: 100,\n                  }}\n                  align='right'\n                >\n                  {\n                    rowClues[rowIdx].map(\n                    (clue, clueIdx) =>\n                      <span key={`clue-${rowIdx}-${clueIdx}`} className='clue'>{clue}</span>\n                    )\n                  }\n                </TableCell>\n                {\n                  row.map((cell, colIdx) =>\n                    <TableCell\n                      key={`col-${colIdx}`}\n                      sx={{\n                        border: 1,\n                        width: 25,\n                        height: 25,\n                      }}\n                      onClick={e => handleClick(e, rowIdx, colIdx)}\n                      onContextMenu={e => handleClick(e, rowIdx, colIdx)}\n                      className={\n                        cx({\n                          'picross-cell': true,\n                          'highlight-border-top': rowIdx % 5 === 0,\n                          'highlight-border-left': colIdx % 5 === 0,\n                          filled: cell === CellState.Filled,\n                          xed: cell === CellState.Xed,\n                          marked: cell === CellState.Marked\n                        })\n                      }\n                    />\n                  )\n                }\n              </TableRow>\n            ))\n          }\n        </TableBody>\n      </Table>\n    </Box>\n  );\n};\n\nexport default PuzzleView;\n","import React from 'react';\n\nimport Container from '@mui/material/Container';\n\nimport Layout from './Layout';\nimport Puzzle from '../utils/puzzle';\nimport PuzzleView from './PuzzleView';\n\nconst Homepage = () => {\n  const puzzle = new Puzzle(5, 5, [\n    [1, 0, 0, 0, 1],\n    [0, 0, 0, 0, 0],\n    [0, 1, 0, 1, 0],\n    [1, 0, 0, 0, 1],\n    [1, 1, 0, 1, 1],\n  ]);\n\n  return (\n    <Layout>\n      <Container>\n        <h1>Hello, world!</h1>\n        <PuzzleView puzzle={puzzle}/>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Homepage;\n","import React, { useState } from 'react';\n\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\nimport Layout from './Layout';\nimport Puzzle from '../utils/puzzle';\nimport PuzzleView from './PuzzleView';\n\nconst Builder = () => {\n  const [width, setWidth] = useState<number>(5);\n  const [height, setHeight] = useState<number>(5);\n  const [puzzle, setPuzzle] = useState<Puzzle | null>(null);\n\n  const handleChangeHeight = (e: any) => {\n    setHeight(e.target.value);\n  };\n\n  const handleChangeWidth = (e: any) => {\n    setWidth(e.target.value);\n  };\n\n  const generatePuzzle = () => {\n    const solution = [];\n    const rowTemplate = [];\n    for (let j = 0; j < width; ++j) {\n      rowTemplate.push(0);\n    }\n    for (let i = 0; i < height; ++i) {\n      solution.push(rowTemplate);\n    }\n    const newPuzzle = new Puzzle(width, height, solution, { test: true });\n    setPuzzle(newPuzzle);\n  };\n\n  const exportPuzzle = () => {\n    if (!puzzle) { return; }\n    console.log(JSON.stringify(puzzle.solution));\n  };\n\n  return (\n    <Layout>\n      <Container>\n        <h1>Puzzle Builder</h1>\n        <Box sx={{ minWidth: 120 }}>\n          {/* Width */}\n          <FormControl>\n            <InputLabel id=\"width-label\">Width</InputLabel>\n            <Select\n              labelId=\"width-label\"\n              id=\"change-width\"\n              value={width}\n              label=\"Width\"\n              onChange={handleChangeWidth}\n            >\n              <MenuItem value={5}>5</MenuItem>\n              <MenuItem value={10}>10</MenuItem>\n              <MenuItem value={15}>15</MenuItem>\n              <MenuItem value={20}>20</MenuItem>\n            </Select>\n          </FormControl>\n\n          {/* Height */}\n          <FormControl>\n            <InputLabel id=\"height-label\">Height</InputLabel>\n            <Select\n              labelId=\"height-label\"\n              id=\"change-height\"\n              value={height}\n              label=\"Height\"\n              onChange={handleChangeHeight}\n            >\n              <MenuItem value={5}>5</MenuItem>\n              <MenuItem value={10}>10</MenuItem>\n              <MenuItem value={15}>15</MenuItem>\n              <MenuItem value={20}>20</MenuItem>\n            </Select>\n          </FormControl>\n\n          <br />\n          <br />\n          <Button variant=\"contained\" onClick={generatePuzzle}>Generate</Button>\n          {puzzle && <Button variant=\"contained\" onClick={exportPuzzle}>Export</Button>}\n        </Box>\n\n        {puzzle && <PuzzleView puzzle={puzzle}/>}\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Builder;\n","import React, { useState } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport TextField from '@mui/material/TextField';\n\nimport Layout from './Layout';\nimport Puzzle from '../utils/puzzle';\nimport PuzzleView from './PuzzleView';\n\nconst Tester = () => {\n  const [puzzleInput, setPuzzleInput] = useState('');\n  const [puzzle, setPuzzle] = useState<Puzzle | null>(null);\n\n  const generatePuzzle = () => {\n    const solution = JSON.parse(puzzleInput);\n    const height = solution.length;\n    const width = solution[0].length;\n    const newPuzzle = new Puzzle(width, height, solution);\n    setPuzzle(newPuzzle);\n  };\n\n  const handlePuzzleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPuzzleInput(e.target.value);\n  };\n\n  return (\n    <Layout>\n      <Container>\n        <h1>Hello, world!</h1>\n        <h2>Build from input</h2>\n        <TextField id=\"puzzle-input\" label=\"Input Solution\" variant=\"outlined\" onChange={handlePuzzleInput} value={puzzleInput}/>\n        <Button variant=\"contained\" onClick={generatePuzzle}>Generate</Button>\n        {puzzle && <PuzzleView puzzle={puzzle}/>}\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Tester;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nimport Homepage from './components/Homepage';\nimport Builder from './components/Builder';\nimport Tester from './components/Tester';\n\nfunction App() {\n  return (\n    <>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Routes>\n          <Route path=\"/builder\" element={<Builder/>} />\n          <Route path=\"/tester\" element={<Tester/>} />\n          <Route path=\"/\" element={<Homepage/>} />\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}